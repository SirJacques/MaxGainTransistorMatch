println("This Script will calculate the desired source and load reflection co-efficients for a transistor amplifier.")
println("Note: This is for bilateral (S12 != 0) unconditionally stable transistor circuits - Ref Pozar 12.3")
println("Obtain S parameters from MWO or network analysis")
println("Current S parameters at 2.45 GHz:")
s11 = -0.39484468-0.44956873im
s12 = 0.019467859+0.020976976im
s22 = -0.13273196-0.0588993im
s21 = -2.067322+10.068579im
print("S11 = ")
println(s11)
print("S12 = ")
println(s12)
print("S22 = ")
println(s22)
print("S21 = ")
println(s21)
print("\n")
#Test S parameters for 4GHz example in Pozar
#s11 = -0.3156272257-0.6471317133im
#s12 = 0.01633917105+0.02516011704im
#s21 = 0.6289969286+2.522768888im
#s22 = 0.4290832342-0.5905824059im


dell = (s11*s22 - s12*s21)
print("Dell magnitude:")
println(abs(dell))
K = (1-abs2(s11)-abs2(s22)+abs2(dell))/(2*abs(s12*s21))
print("K for stability: ")
println(K)
B1 = 1 + abs2(s11) -abs2(s22) - abs2(dell)
print("B1: ")
println(B1)
B2 = 1+ abs2(s22) - abs2(s11) - abs2(dell)
print("B2: ")
println(B2)
C1 = s11 - dell*conj(s22)
print("C1: ")
println(C1)
C2 = s22 - dell*conj(s11)
print("C2: ")
println(C2)
println("\n")
println("Now we will evaluate the additive (+) reflection coefficients")
SReflection = (B1 + sqrt((B1*B1)-4*abs2(C1)))/(2*C1)
LReflection = (B2 + sqrt((B2*B2)-4*abs2(C2)))/(2*C2)
println("best Reflection at source:")
println(SReflection)
println("phasor form (degrees):")
println(abs(SReflection))
println(rad2deg(angle(SReflection)))
println("best Reflection at load:")
println(LReflection)
println("phasor form (degrees):")
println(abs(LReflection))
println(rad2deg(angle(LReflection)))
println("Now we will evaluate the subtractive reflection coefficients")
println("\n")
SReflection2 = B1 - sqrt((B1*B1) - 4*abs2(C1))
SReflection2 = SReflection2/(2*C1)
LReflection2 = (B2 - sqrt(B2^2-4*abs2(C2)))/(2*C2)
println("best Reflection at source:")
println(SReflection2)
println("phasor form (degrees):")
println(abs(SReflection2))
println(rad2deg(angle(SReflection2)))
println("best Reflection at load:")
println(LReflection2)
println("phasor form (degrees):")
println(abs(LReflection2))
println(rad2deg(angle(LReflection2)))
println("\n")
println("Now evaluating effective gain factors for subtracted equation pair:")
println(abs2(SReflection2))
Gs = 1/(1-abs2(SReflection2))
print("Gs=")
println(Gs)
G0 = abs2(s21)
print("G0=")
println(G0)
GL = (1-abs2(LReflection2))/abs2(1-s22*(LReflection2))
print("GL=")
println(GL)
GTmax = Gs + G0 + GL
print("GTmax (dB) = ")
println(10*log(complex(10),GTmax))

println("\n")
println("Now evaluating effective gain factors  for added equation pair:")
println(abs2(SReflection))
Gs = 1/(1-abs2(SReflection))
print("Gs=")
println(Gs)
G0 = abs2(s21)
print("G0=")
println(G0)
GL = (1-abs2(LReflection))/abs2(1-s22*(LReflection))
print("GL=")
println(GL)
GTmax = Gs + G0 + GL
print("GTmax (dB) = ")
println(10*log(complex(10),GTmax))
println("\n")
println("It is clear the subtracted pair are the correct results.")
